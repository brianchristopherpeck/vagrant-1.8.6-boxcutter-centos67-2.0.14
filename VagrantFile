# Works with vagrant 1.8.6 and virtual box 5.1.14
varStartAgent = "stop"
varManagerServer = "pocd-cm572-template-manager"
varTemplateNode = "pocd-cm572-template-node"
varWebSubDir = "parcels"
varWebExportedRepoDir = "_cdh5-parcels"


pocd_nodes = [
	{ :host => "#{varManagerServer}", :ip => "10.10.45.9", :box => "boxcutter/centos67", :version => "2.0.14", :ram => 3172, :cpu => 2, :gui => false},
	{ :host => "#{varTemplateNode}", :ip => "10.10.45.10", :box => "boxcutter/centos67", :version => "2.0.14", :ram => 3172, :cpu => 2, :gui => false}
]

varDomain = "poc-d.internal"
varRepository = "../REPOSITORY/"

# Creates /etc/hosts entry for each node
varHostEntries = ""
pocd_nodes.each do |pocd_node|
	varHostEntries << "#{pocd_node[:ip]} #{pocd_node[:host]}.#{varDomain} #{pocd_node[:host]}\n"
end

puts varHostEntries

# Variable containing bash script for /etc/hosts entries
$etchosts = <<SCRIPT
#!/bin/bash
cat > /etc/hosts <<EOF
127.0.0.1    Localhost
10.10.45.1   host.#{varDomain} host
#{varHostEntries}
EOF
SCRIPT


Vagrant.configure("2") do |config| # Config variable here represents the vagrant system
	config.hostmanager.enabled = true # Enables host manager
	config.hostmanager.manage_host = true # Enables managing host file of machine vagrant is running on
	config.hostmanager.manage_guest = false # Disables managing the host files on the guest machines
	config.hostmanager.ignore_private_ip = false  
	config.hostmanager.include_offline = true
	pocd_nodes.each  do |pocd_node| # While loop that runs config for each pocd_node from pocd_nodes array
		config.vm.define pocd_node[:host] do |pocd_config| # cm-571-template is name of node and pocd_config is a variable we can utilize to configure this specific virtual machine
			pocd_config.vm.box = pocd_node[:box] # This variable points to an image file
			pocd_config.vm.network "private_network", ip: pocd_node[:ip], :netmask => "255.255.255.0" # sets up network adapter (internal)
			pocd_config.vm.hostname = "#{pocd_node[:host]}.#{varDomain}"
			pocd_config.hostmanager.aliases = "#{pocd_node[:host]}" # Add this alias into the hosts file of THIS virtual machine in the loop
			pocd_config.vm.box_version = pocd_node[:version]# Points to a specific verions of box cutter vm
			pocd_config.vm.provider :virtualbox do |v| # go to provider, in this case virtual box
				v.name = pocd_node[:host].to_s # makes the name in virtual box pretty
				v.gui = pocd_node[:gui] # enable the providers gui

				v.customize ["modifyvm", :id, "--memory", pocd_node[:ram].to_s ] # Manually set the ram the ram
				v.customize ["modifyvm", :id, "--cpus", pocd_node[:cpu].to_s ] # Manually set the number of CPUs
			end
			pocd_config.vm.synced_folder varRepository, "/repository", # Sets synced folder for repository
				id: "repository",
				owner: "vagrant",
				group: "vagrant"

			pocd_config.vm.provision :shell, :inline => $etchosts # Runs bash script to updte /etc/hosts on each node
			pocd_config.vm.provision :shell, :path => "repo-cloudera/provision_rpm_cm572.sh"

			pocd_config.vm.provision :shell, :path => "os-tuning/provision_for_print_os.sh"
			pocd_config.vm.provision :shell, :path => "os-tuning/provision_for_os_settings.sh"
			pocd_config.vm.provision :shell, :path => "os-tuning/provision_for_os.sh"
			pocd_config.vm.provision :shell, :path => "os-tuning/provision_for_print_os.sh"

			pocd_config.vm.provision :shell, :path => "java/provision_for_java.sh" # Sets path for java directory to find provision script

			if pocd_node[:host] == varManagerServer

				# http://pocd-cm572-template-manager/parcels/ *** Might have to hit from ip address 10.10.45.9
				pocd_config.vm.provision :shell,
					:path => "webserver/provision_for_httpd_67_v3.sh",
					:args => "#{varManagerServer} #{varWebSubDir} #{varWebExportedRepoDir}"

			# http://pocd-cm572-prod-manager:7180 *** Might have to hit from ip address 10.10.45.9:7180
			pocd_config.vm.provision :shell, :path => "cloudera-manager-deploy/provision_for_cdh_master_embedded.sh"

			end

			pocd_config.vm.provision :shell,
				:path => "cloudera-node-deploy/provision_for_cdh_datanode.sh",
				:args => "#{varManagerServer} #{varStartAgent}"
		end
	end
end 